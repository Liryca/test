{"ast":null,"code":"import { fetchAllUsers, fetchDepartmentUsers } from \"../../api/api\";\nexport const getUsersAction = us => ({\n  type: 'GET_USERS'\n});\nexport const getUsersSuccessAction = userList => ({\n  type: 'GET_USERS_SUCCESS',\n  userList: userList\n});\nexport const getUsersErrorAction = error => ({\n  type: 'GET_USERS_ERROR',\n  error: error\n});\nexport function getUser() {\n  return async function (dispatch, getState) {\n    const {\n      sort\n    } = getState();\n    try {\n      dispatch(getUsersAction());\n      if (sort.department === 'all') {\n        const response = await fetchAllUsers();\n        dispatch(getUsersSuccessAction(response.items));\n      } else {\n        const response = await fetchDepartmentUsers(sort.department);\n        dispatch(getUsersSuccessAction(response.items));\n      }\n    } catch (e) {\n      console.log(e);\n      dispatch(getUsersErrorAction('Error'));\n    }\n  };\n}\n\n// export const getSortedNameUsers = (users:User[]) => ({\n//     type: 'SORT_NAME_USERS',\n//     users\n\n// })\n\n// export const getSortedDepartmentUsers = (users: User[]) => ({\n//     type: 'SORT_DEPARTMENT_USERS',\n//     users\n// })\n\n// export const getSortedAutocomplitUsers = (users: User[]) => ({\n//     type: 'SORT_DEPARTMENT_USERS',\n//     users\n// })\n\n// export function userNameThunk() {\n\n//     return async function (dispatch: Dispatch, getState: () => RootState) {\n//         console.log(getState())\n//         const { users, modal, sort } = getState()\n//         if (sort.department === 'all') {\n//             const response = await fetchAllUsers()\n//             dispatch(getSortedNameUsers(sotredUserName(response.items)))\n//         } else {\n//             const responsDepartment = await fetchUsersDepartment(getState().sort.department)\n//             dispatch(getSortedDepartmentUsers(sotredUserName(responsDepartment.items)))\n//      }  \n//     };\n// }\n\n// export function userDateThunk() {\n//     return async function (dispatch: Dispatch, getState: () => RootState) {\n//         console.log(getState())\n\n//         if (getState().sort.department === 'all') {\n//             const responseAll = await fetchUsers()\n//             dispatch(getSortedNameUsers(sotredUserDay(responseAll.items)))\n//         } else {\n//             const responsDepartment = await fetchUsersDepartment(getState().sort.department)\n//             dispatch(getSortedDepartmentUsers(sotredUserDay(responsDepartment.items)))\n\n//         }\n\n//     };\n// }\n\n// export function sendUserDepartmentThunk(value: string) {\n//     return async function (dispatch: Dispatch) {\n//         const response = await fetchUsersAbout(value)\n//         console.log(response)\n//         dispatch(getSortedDepartmentUsers((response.items)))\n\n//     };\n// }\n\n// export function sendUserAutocompliteThunk() {\n//     return async function (dispatch: Dispatch) {\n//         const response = await fetchUsers()\n//         console.log(response)\n//         dispatch(getSortedDepartmentUsers((response.items)))\n\n//     };\n// }","map":{"version":3,"names":["fetchAllUsers","fetchDepartmentUsers","getUsersAction","us","type","getUsersSuccessAction","userList","getUsersErrorAction","error","getUser","dispatch","getState","sort","department","response","items","e","console","log"],"sources":["C:/Users/LENOVO/Desktop/test/src/store/actions/usersAction.ts"],"sourcesContent":["import { User } from \"../../types/usersTypes\";\r\nimport { Dispatch, } from 'redux';\r\nimport { fetchAllUsers, fetchDepartmentUsers} from \"../../api/api\";\r\nimport { RootState } from \"..\";\r\n\r\nexport const getUsersAction =(us)=>({\r\n    type: 'GET_USERS',\r\n})\r\n\r\nexport const getUsersSuccessAction = (userList:User[]) => ({\r\n    type: 'GET_USERS_SUCCESS',\r\n    userList:userList\r\n})\r\n\r\nexport const getUsersErrorAction = (error:string) => ({\r\n    type: 'GET_USERS_ERROR',\r\n    error:error\r\n})\r\n\r\n export function getUser() {\r\n     return async function (dispatch: Dispatch, getState: () => RootState) {\r\n        const { sort } = getState()\r\n         try {\r\n             dispatch(getUsersAction());\r\n             if (sort.department === 'all') {\r\n                const response = await fetchAllUsers();\r\n                dispatch(getUsersSuccessAction(response.items));\r\n            } else {\r\n                const response = await fetchDepartmentUsers(sort.department);\r\n                dispatch(getUsersSuccessAction(response.items));\r\n            }\r\n\r\n         } catch (e) {\r\n             console.log(e)\r\n             dispatch(getUsersErrorAction('Error'))\r\n         }\r\n         \r\n         \r\n       \r\n      \r\n     \r\n    }\r\n}\r\n\r\n\r\n// export const getSortedNameUsers = (users:User[]) => ({\r\n//     type: 'SORT_NAME_USERS',\r\n//     users\r\n  \r\n// })\r\n\r\n// export const getSortedDepartmentUsers = (users: User[]) => ({\r\n//     type: 'SORT_DEPARTMENT_USERS',\r\n//     users\r\n// })\r\n\r\n// export const getSortedAutocomplitUsers = (users: User[]) => ({\r\n//     type: 'SORT_DEPARTMENT_USERS',\r\n//     users\r\n// })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export function userNameThunk() {\r\n\r\n//     return async function (dispatch: Dispatch, getState: () => RootState) {\r\n//         console.log(getState())\r\n//         const { users, modal, sort } = getState()\r\n//         if (sort.department === 'all') {\r\n//             const response = await fetchAllUsers()\r\n//             dispatch(getSortedNameUsers(sotredUserName(response.items)))\r\n//         } else {\r\n//             const responsDepartment = await fetchUsersDepartment(getState().sort.department)\r\n//             dispatch(getSortedDepartmentUsers(sotredUserName(responsDepartment.items)))\r\n//      }  \r\n//     };\r\n// }\r\n\r\n// export function userDateThunk() {\r\n//     return async function (dispatch: Dispatch, getState: () => RootState) {\r\n//         console.log(getState())\r\n      \r\n//         if (getState().sort.department === 'all') {\r\n//             const responseAll = await fetchUsers()\r\n//             dispatch(getSortedNameUsers(sotredUserDay(responseAll.items)))\r\n//         } else {\r\n//             const responsDepartment = await fetchUsersDepartment(getState().sort.department)\r\n//             dispatch(getSortedDepartmentUsers(sotredUserDay(responsDepartment.items)))\r\n            \r\n//         }\r\n        \r\n       \r\n              \r\n//     };\r\n// }\r\n\r\n\r\n// export function sendUserDepartmentThunk(value: string) {\r\n//     return async function (dispatch: Dispatch) {\r\n//         const response = await fetchUsersAbout(value)\r\n//         console.log(response)\r\n//         dispatch(getSortedDepartmentUsers((response.items)))\r\n              \r\n//     };\r\n// }\r\n\r\n// export function sendUserAutocompliteThunk() {\r\n//     return async function (dispatch: Dispatch) {\r\n//         const response = await fetchUsers()\r\n//         console.log(response)\r\n//         dispatch(getSortedDepartmentUsers((response.items)))\r\n              \r\n//     };\r\n// }\r\n"],"mappings":"AAEA,SAASA,aAAa,EAAEC,oBAAoB,QAAO,eAAe;AAGlE,OAAO,MAAMC,cAAc,GAAGC,EAAE,KAAI;EAChCC,IAAI,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMC,qBAAqB,GAAIC,QAAe,KAAM;EACvDF,IAAI,EAAE,mBAAmB;EACzBE,QAAQ,EAACA;AACb,CAAC,CAAC;AAEF,OAAO,MAAMC,mBAAmB,GAAIC,KAAY,KAAM;EAClDJ,IAAI,EAAE,iBAAiB;EACvBI,KAAK,EAACA;AACV,CAAC,CAAC;AAED,OAAO,SAASC,OAAO,GAAG;EACtB,OAAO,gBAAgBC,QAAkB,EAAEC,QAAyB,EAAE;IACnE,MAAM;MAAEC;IAAK,CAAC,GAAGD,QAAQ,EAAE;IAC1B,IAAI;MACAD,QAAQ,CAACR,cAAc,EAAE,CAAC;MAC1B,IAAIU,IAAI,CAACC,UAAU,KAAK,KAAK,EAAE;QAC5B,MAAMC,QAAQ,GAAG,MAAMd,aAAa,EAAE;QACtCU,QAAQ,CAACL,qBAAqB,CAACS,QAAQ,CAACC,KAAK,CAAC,CAAC;MACnD,CAAC,MAAM;QACH,MAAMD,QAAQ,GAAG,MAAMb,oBAAoB,CAACW,IAAI,CAACC,UAAU,CAAC;QAC5DH,QAAQ,CAACL,qBAAqB,CAACS,QAAQ,CAACC,KAAK,CAAC,CAAC;MACnD;IAEH,CAAC,CAAC,OAAOC,CAAC,EAAE;MACRC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;MACdN,QAAQ,CAACH,mBAAmB,CAAC,OAAO,CAAC,CAAC;IAC1C;EAML,CAAC;AACL;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAeA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}