{"ast":null,"code":"import axios from 'axios';\nexport function fetchUsers() {\n  const options = {\n    method: 'GET',\n    url: \"https://stoplight.io/mocks/kode-frontend-team/koder-stoplight/86566464/users?__example=all\",\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  return axios.request(options).then(response => {\n    return response.data;\n  }).catch(error => {\n    return error(error);\n  });\n}\nexport function sotredUserName(users) {\n  return users.sort((a, b) => a.firstName > b.firstName ? 1 : -1);\n}\nconst date = new Date('2022-08-24');\nconst monthNow = date.getMonth() + 1;\nconst dayNow = date.getDate();\nexport function sotredUserDay(users) {\n  const a = users.filter(i => {\n    return new Date(i.birthday).getMonth() + 1 > monthNow || new Date(i.birthday).getMonth() + 1 === monthNow && new Date(i.birthday).getDate() < day;\n  }).sort((a, b) => {\n    if (new Date(a.birthday).getMonth() === new Date(b.birthday).getMonth()) {\n      return new Date(a.birthday).getDate() > new Date(b.birthday).getDate() ? 1 : -1;\n    } else {\n      return new Date(a.birthday).getMonth() > new Date(b.birthday).getMonth() ? 1 : -1;\n    }\n  });\n  const b = users.filter(i => {\n    return new Date(i.birthday).getMonth() + 1 < monthNow;\n  }).sort((a, b) => {\n    if (new Date(a.birthday).getMonth() === new Date(b.birthday).getMonth()) {\n      return new Date(a.birthday).getDate() > new Date(b.birthday).getDate() ? 1 : -1;\n    } else {\n      return new Date(a.birthday).getMonth() > new Date(b.birthday).getMonth() ? 1 : -1;\n    }\n  });\n\n  // const с = users.filter((i) => {\n  //   return new Date(i.birthday).getMonth() + 1 === monthNow\n  // }).sort((a, b) => {\n  //  return new Date(a.birthday).getDate() >  ? 1 : -1\n\n  // })\n\n  // const a = users.filter(i => new Date(i.birthday).getMonth()+1 >= monthNow)\n  // const b = users.filter(i => new Date(i.birthday).getMonth()+1 < monthNow)\n  //   const c = users.filter(i => new Date(i.birthday).getMonth()+1 === monthNow)\n  console.log(a);\n  console.log(b);\n  //   console.log(c)\n\n  return users.sort((a, b) => {\n    return Date.parse(a.birthday) < Date.parse(b.birthday) ? 1 : -1;\n  });\n}","map":{"version":3,"names":["axios","fetchUsers","options","method","url","headers","request","then","response","data","catch","error","sotredUserName","users","sort","a","b","firstName","date","Date","monthNow","getMonth","dayNow","getDate","sotredUserDay","filter","i","birthday","day","console","log","parse"],"sources":["C:/Users/LENOVO/Desktop/test/src/api/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { User } from '../types/usersTypes';\r\n\r\nexport function fetchUsers() {\r\n  const options = {\r\n    method: 'GET',\r\n    url: \"https://stoplight.io/mocks/kode-frontend-team/koder-stoplight/86566464/users?__example=all\",\r\n    headers: { 'Content-Type': 'application/json' }\r\n  };\r\n\r\n  return axios.request(options).then((response) => {\r\n    return response.data\r\n  }).catch((error) => {\r\n    return error(error);\r\n  });\r\n\r\n}\r\n\r\n\r\nexport function sotredUserName(users: User[]) {\r\n  return users.sort((a, b) => a.firstName > b.firstName ? 1 : -1);\r\n\r\n}\r\n\r\nconst date = new Date('2022-08-24');\r\nconst monthNow = date.getMonth() + 1;\r\nconst dayNow = date.getDate();\r\n\r\nexport function sotredUserDay(users: User[]) {\r\n\r\n  const a = users.filter((i) => {\r\n    return new Date(i.birthday).getMonth() + 1 > monthNow ||\r\n      (new Date(i.birthday).getMonth() + 1 === monthNow &&new Date(i.birthday).getDate()< day)\r\n  }).sort((a, b) => {\r\n    if (new Date(a.birthday).getMonth() === new Date(b.birthday).getMonth()) {\r\n      return new Date(a.birthday).getDate() > new Date(b.birthday).getDate() ? 1 : -1\r\n    } else {\r\n      return new Date(a.birthday).getMonth() > new Date(b.birthday).getMonth() ? 1 : -1\r\n    }\r\n  })\r\n\r\n  const b = users.filter((i) => {\r\n    return new Date(i.birthday).getMonth() + 1 < monthNow\r\n  }).sort((a, b) => {\r\n    if (new Date(a.birthday).getMonth() === new Date(b.birthday).getMonth()) {\r\n      return new Date(a.birthday).getDate() > new Date(b.birthday).getDate() ? 1 : -1\r\n    } else {\r\n      return new Date(a.birthday).getMonth() > new Date(b.birthday).getMonth() ? 1 : -1\r\n    }\r\n  })\r\n\r\n\r\n  // const с = users.filter((i) => {\r\n  //   return new Date(i.birthday).getMonth() + 1 === monthNow\r\n  // }).sort((a, b) => {\r\n  //  return new Date(a.birthday).getDate() >  ? 1 : -1\r\n  \r\n\r\n  // })\r\n\r\n\r\n  // const a = users.filter(i => new Date(i.birthday).getMonth()+1 >= monthNow)\r\n  // const b = users.filter(i => new Date(i.birthday).getMonth()+1 < monthNow)\r\n//   const c = users.filter(i => new Date(i.birthday).getMonth()+1 === monthNow)\r\nconsole.log(a)\r\n  console.log(b)\r\n//   console.log(c)\r\n\r\n\r\n  return users.sort((a, b) => {\r\n    return Date.parse(a.birthday) < Date.parse(b.birthday) ? 1 : -1\r\n  });\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}