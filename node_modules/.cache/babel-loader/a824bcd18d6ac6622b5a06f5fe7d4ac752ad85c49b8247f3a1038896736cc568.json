{"ast":null,"code":"import { UserActionTypes } from \"../../types/usersTypes\";\nimport { fetchAllUsers, fetchDepartmentUsers, sotredUserDay, sotredUserName } from \"../../api/api\";\nexport const getUsersAction = () => ({\n  type: UserActionTypes.GET_USERS\n});\nexport const getUsersSuccessAction = userList => ({\n  type: UserActionTypes.GET_USERS_SUCCESS,\n  userList: userList\n});\nexport const getUsersErrorAction = error => ({\n  type: UserActionTypes.GET_USERS_ERROR,\n  error: error\n});\nexport function getUser() {\n  return async function (dispatch, getState) {\n    const {\n      filter,\n      modal\n    } = getState();\n    try {\n      dispatch(getUsersAction());\n      if (filter.department === 'all') {\n        const response = await fetchAllUsers();\n        modal.radio === 'name' ? dispatch(getUsersSuccessAction(sotredUserName(response.items))) : dispatch(getUsersSuccessAction(sotredUserDay(response.items)));\n        // dispatch(getUsersSuccessAction(response.items));\n      } else {\n        const response = await fetchDepartmentUsers(filter.department);\n        dispatch(getUsersSuccessAction(response.items));\n      }\n    } catch (e) {\n      console.log(e);\n      dispatch(getUsersErrorAction('Error'));\n    }\n  };\n}\n\n// export const getSortedNameUsers = (users:User[]) => ({\n//     type: 'SORT_NAME_USERS',\n//     users\n\n// })\n\n// export const getSortedDepartmentUsers = (users: User[]) => ({\n//     type: 'SORT_DEPARTMENT_USERS',\n//     users\n// })\n\n// export const getSortedAutocomplitUsers = (users: User[]) => ({\n//     type: 'SORT_DEPARTMENT_USERS',\n//     users\n// })\n\n// export function userNameThunk() {\n\n//     return async function (dispatch: Dispatch, getState: () => RootState) {\n//         console.log(getState())\n//         const { users, modal, sort } = getState()\n//         if (sort.department === 'all') {\n//             const response = await fetchAllUsers()\n//             dispatch(getSortedNameUsers(sotredUserName(response.items)))\n//         } else {\n//             const responsDepartment = await fetchUsersDepartment(getState().sort.department)\n//             dispatch(getSortedDepartmentUsers(sotredUserName(responsDepartment.items)))\n//      }  \n//     };\n// }\n\n// export function userDateThunk() {\n//     return async function (dispatch: Dispatch, getState: () => RootState) {\n//         console.log(getState())\n\n//         if (getState().sort.department === 'all') {\n//             const responseAll = await fetchUsers()\n//             dispatch(getSortedNameUsers(sotredUserDay(responseAll.items)))\n//         } else {\n//             const responsDepartment = await fetchUsersDepartment(getState().sort.department)\n//             dispatch(getSortedDepartmentUsers(sotredUserDay(responsDepartment.items)))\n\n//         }\n\n//     };\n// }\n\n// export function sendUserDepartmentThunk(value: string) {\n//     return async function (dispatch: Dispatch) {\n//         const response = await fetchUsersAbout(value)\n//         console.log(response)\n//         dispatch(getSortedDepartmentUsers((response.items)))\n\n//     };\n// }\n\n// export function sendUserAutocompliteThunk() {\n//     return async function (dispatch: Dispatch) {\n//         const response = await fetchUsers()\n//         console.log(response)\n//         dispatch(getSortedDepartmentUsers((response.items)))\n\n//     };\n// }","map":{"version":3,"names":["UserActionTypes","fetchAllUsers","fetchDepartmentUsers","sotredUserDay","sotredUserName","getUsersAction","type","GET_USERS","getUsersSuccessAction","userList","GET_USERS_SUCCESS","getUsersErrorAction","error","GET_USERS_ERROR","getUser","dispatch","getState","filter","modal","department","response","radio","items","e","console","log"],"sources":["C:/Users/LENOVO/Desktop/test/src/store/actions/usersAction.ts"],"sourcesContent":["import { User, UserActionTypes } from \"../../types/usersTypes\";\r\nimport { Dispatch, } from 'redux';\r\nimport { fetchAllUsers, fetchDepartmentUsers, sotredUserDay, sotredUserName} from \"../../api/api\";\r\nimport { RootState } from \"..\";\r\n\r\nexport const getUsersAction =()=>({\r\n    type: UserActionTypes.GET_USERS,\r\n})\r\n\r\nexport const getUsersSuccessAction = (userList:User[]) => ({\r\n    type: UserActionTypes.GET_USERS_SUCCESS,\r\n    userList:userList\r\n})\r\n\r\nexport const getUsersErrorAction = (error:string) => ({\r\n    type: UserActionTypes.GET_USERS_ERROR,\r\n    error:error\r\n})\r\n\r\n export function getUser() {\r\n     return async function (dispatch: Dispatch, getState: () => RootState) {\r\n         const { filter,modal } = getState();\r\n       \r\n         try {\r\n             dispatch(getUsersAction());\r\n             if (filter.department === 'all') {\r\n                 const response = await fetchAllUsers();\r\n                 modal.radio === 'name' ?dispatch(getUsersSuccessAction(sotredUserName(response.items))):\r\n                 dispatch(getUsersSuccessAction(sotredUserDay(response.items)))\r\n                // dispatch(getUsersSuccessAction(response.items));\r\n            } else {\r\n                const response = await fetchDepartmentUsers(filter.department);\r\n                dispatch(getUsersSuccessAction(response.items));\r\n            }\r\n\r\n         } catch (e) {\r\n             console.log(e)\r\n             dispatch(getUsersErrorAction('Error'))\r\n         }\r\n         \r\n         \r\n       \r\n      \r\n     \r\n    }\r\n}\r\n\r\n\r\n// export const getSortedNameUsers = (users:User[]) => ({\r\n//     type: 'SORT_NAME_USERS',\r\n//     users\r\n  \r\n// })\r\n\r\n// export const getSortedDepartmentUsers = (users: User[]) => ({\r\n//     type: 'SORT_DEPARTMENT_USERS',\r\n//     users\r\n// })\r\n\r\n// export const getSortedAutocomplitUsers = (users: User[]) => ({\r\n//     type: 'SORT_DEPARTMENT_USERS',\r\n//     users\r\n// })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export function userNameThunk() {\r\n\r\n//     return async function (dispatch: Dispatch, getState: () => RootState) {\r\n//         console.log(getState())\r\n//         const { users, modal, sort } = getState()\r\n//         if (sort.department === 'all') {\r\n//             const response = await fetchAllUsers()\r\n//             dispatch(getSortedNameUsers(sotredUserName(response.items)))\r\n//         } else {\r\n//             const responsDepartment = await fetchUsersDepartment(getState().sort.department)\r\n//             dispatch(getSortedDepartmentUsers(sotredUserName(responsDepartment.items)))\r\n//      }  \r\n//     };\r\n// }\r\n\r\n// export function userDateThunk() {\r\n//     return async function (dispatch: Dispatch, getState: () => RootState) {\r\n//         console.log(getState())\r\n      \r\n//         if (getState().sort.department === 'all') {\r\n//             const responseAll = await fetchUsers()\r\n//             dispatch(getSortedNameUsers(sotredUserDay(responseAll.items)))\r\n//         } else {\r\n//             const responsDepartment = await fetchUsersDepartment(getState().sort.department)\r\n//             dispatch(getSortedDepartmentUsers(sotredUserDay(responsDepartment.items)))\r\n            \r\n//         }\r\n        \r\n       \r\n              \r\n//     };\r\n// }\r\n\r\n\r\n// export function sendUserDepartmentThunk(value: string) {\r\n//     return async function (dispatch: Dispatch) {\r\n//         const response = await fetchUsersAbout(value)\r\n//         console.log(response)\r\n//         dispatch(getSortedDepartmentUsers((response.items)))\r\n              \r\n//     };\r\n// }\r\n\r\n// export function sendUserAutocompliteThunk() {\r\n//     return async function (dispatch: Dispatch) {\r\n//         const response = await fetchUsers()\r\n//         console.log(response)\r\n//         dispatch(getSortedDepartmentUsers((response.items)))\r\n              \r\n//     };\r\n// }\r\n"],"mappings":"AAAA,SAAeA,eAAe,QAAQ,wBAAwB;AAE9D,SAASC,aAAa,EAAEC,oBAAoB,EAAEC,aAAa,EAAEC,cAAc,QAAO,eAAe;AAGjG,OAAO,MAAMC,cAAc,GAAE,OAAK;EAC9BC,IAAI,EAAEN,eAAe,CAACO;AAC1B,CAAC,CAAC;AAEF,OAAO,MAAMC,qBAAqB,GAAIC,QAAe,KAAM;EACvDH,IAAI,EAAEN,eAAe,CAACU,iBAAiB;EACvCD,QAAQ,EAACA;AACb,CAAC,CAAC;AAEF,OAAO,MAAME,mBAAmB,GAAIC,KAAY,KAAM;EAClDN,IAAI,EAAEN,eAAe,CAACa,eAAe;EACrCD,KAAK,EAACA;AACV,CAAC,CAAC;AAED,OAAO,SAASE,OAAO,GAAG;EACtB,OAAO,gBAAgBC,QAAkB,EAAEC,QAAyB,EAAE;IAClE,MAAM;MAAEC,MAAM;MAACC;IAAM,CAAC,GAAGF,QAAQ,EAAE;IAEnC,IAAI;MACAD,QAAQ,CAACV,cAAc,EAAE,CAAC;MAC1B,IAAIY,MAAM,CAACE,UAAU,KAAK,KAAK,EAAE;QAC7B,MAAMC,QAAQ,GAAG,MAAMnB,aAAa,EAAE;QACtCiB,KAAK,CAACG,KAAK,KAAK,MAAM,GAAEN,QAAQ,CAACP,qBAAqB,CAACJ,cAAc,CAACgB,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC,GACvFP,QAAQ,CAACP,qBAAqB,CAACL,aAAa,CAACiB,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC;QAC/D;MACJ,CAAC,MAAM;QACH,MAAMF,QAAQ,GAAG,MAAMlB,oBAAoB,CAACe,MAAM,CAACE,UAAU,CAAC;QAC9DJ,QAAQ,CAACP,qBAAqB,CAACY,QAAQ,CAACE,KAAK,CAAC,CAAC;MACnD;IAEH,CAAC,CAAC,OAAOC,CAAC,EAAE;MACRC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;MACdR,QAAQ,CAACJ,mBAAmB,CAAC,OAAO,CAAC,CAAC;IAC1C;EAML,CAAC;AACL;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAeA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}